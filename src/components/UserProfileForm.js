// import React, { useState, useEffect } from 'react';
// import './UserProfileForm.css'; // –ü–æ–¥–∫–ª—é—á–∏—Ç–µ CSS-—Ñ–∞–π–ª

// const UserProfileForm = ({ onUpdateProfile, profileData, onResetProfile }) => {
//   // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –∏–∑ localStorage –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–ø—Å–æ–≤
//   const savedProfileData = JSON.parse(localStorage.getItem('userProfile')) || profileData;

//   const [formData, setFormData] = useState(savedProfileData || { name: '', lastName: '', jobTitle: '', phone: '', address: '', visibility: 'private', avatar: '', interests: [], links: [] });
//   const [originalData, setOriginalData] = useState(savedProfileData || { name: '', lastName: '', jobTitle: '', phone: '', address: '', visibility: 'private', avatar: '', interests: [], links: [] });
//   const [errors, setErrors] = useState({});

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
//   const handleChange = (e) => {
//     const { name, value } = e.target;
//     setFormData({ ...formData, [name]: value });
//   };

//   // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
//   const validateForm = () => {
//     let newErrors = {};

//     // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
//     if (!formData.name || formData.name.length < 2 || formData.name.length > 50 || !/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(formData.name)) {
//       newErrors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.';
//     }

//     // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
//     if (!formData.lastName || formData.lastName.length < 2 || formData.lastName.length > 50 || !/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(formData.lastName)) {
//       newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.';
//     }

//     // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
//     if (!formData.phone || !/^\+[\d]{10,15}$/.test(formData.phone)) {
//       newErrors.phone = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +<–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã><–Ω–æ–º–µ—Ä>, –æ—Ç 10 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.';
//     }

//     // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
//     if (formData.links && formData.links.length > 0) {
//       formData.links.forEach((link, index) => {
//         if (!/^https?:\/\/\S+$/.test(link.link)) {
//           newErrors[`link-${index}`] = '–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π (–Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://).';
//         }
//       });
//     }

//     setErrors(newErrors);
//     return Object.keys(newErrors).length === 0;
//   };

//   // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
//   const handleAvatarUpload = (e) => {
//     const file = e.target.files[0];
//     if (file) {
//       const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
//       if (!validTypes.includes(file.type)) {
//         alert('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .jpg, .jpeg, .png.');
//         return;
//       }
//       if (file.size > 5 * 1024 * 1024) {
//         alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 MB.');
//         return;
//       }
//       const reader = new FileReader();
//       reader.onloadend = () => {
//         setFormData({ ...formData, avatar: reader.result });
//       };
//       reader.readAsDataURL(file);
//     }
//   };

//   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
//   const handleAddInterest = () => {
//     const newInterest = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å');
//     if (newInterest && newInterest.length <= 30 && /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s,.]+$/.test(newInterest)) {
//       setFormData((prevState) => ({
//         ...prevState,
//         interests: [...(prevState.interests || []), newInterest],
//       }));
//     }
//   };

//   // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
//   const handleAddLink = () => {
//     const siteName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞');
//     const link = prompt('–í–≤–µ–¥–∏—Ç–µ URL');
//     if (siteName && link && /^https?:\/\/\S+$/.test(link)) {
//       setFormData((prevState) => ({
//         ...prevState,
//         links: [...(prevState.links || []), { siteName, link }],
//       }));
//     }
//   };

//   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
//   const handleSave = () => {
//     if (validateForm()) {
//       localStorage.setItem('userProfile', JSON.stringify(formData));
//       onUpdateProfile(formData);
//       setOriginalData(formData); // –û–±–Ω–æ–≤–ª—è–µ–º originalData –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
//     }
//   };

//   // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
//   const handleCancel = () => {
//     setFormData(originalData);  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
//   };

//   return (
//     <div className="user-profile-form">
//       <div className="avatar-upload">
//         <label htmlFor="avatarInput" className="avatar-label">
//           <div className="avatar-placeholder">
//             {formData.avatar ? (
//               <img src={formData.avatar} alt="Avatar" className="avatar-preview" />
//             ) : (
//               <span className="avatar-icon">üì∑</span>
//             )}
//           </div>
//         </label>
//         <input
//           type="file"
//           id="avatarInput"
//           accept="image/*"
//           onChange={handleAvatarUpload}
//           style={{ display: 'none' }}
//         />
//       </div>

//       <div className="form-group">
//         <input
//           type="text"
//           name="name"
//           placeholder="Name"
//           value={formData.name}
//           onChange={handleChange}
//         />
//         {errors.name && <span className="error">{errors.name}</span>}
//       </div>

//       <div className="form-group">
//         <input
//           type="text"
//           name="lastName"
//           placeholder="Lastname"
//           value={formData.lastName}
//           onChange={handleChange}
//         />
//         {errors.lastName && <span className="error">{errors.lastName}</span>}
//       </div>

//       <div className="form-group">
//         <input
//           type="text"
//           name="jobTitle"
//           placeholder="Job Title"
//           value={formData.jobTitle || ''}
//           onChange={handleChange}
//         />
//       </div>

//       <div className="form-group">
//         <input
//           type="text"
//           name="phone"
//           placeholder="Phone"
//           value={formData.phone || ''}
//           onChange={handleChange}
//         />
//         {errors.phone && <span className="error">{errors.phone}</span>}
//       </div>

//       <div className="form-group">
//         <input
//           type="text"
//           name="address"
//           placeholder="Address"
//           value={formData.address || ''}
//           onChange={handleChange}
//         />
//       </div>

//       <div className="form-group visibility-group">
//         <span>Show your profile in Launchpad?</span>
//         <label>
//           <input
//             type="radio"
//             name="visibility"
//             value="private"
//             checked={formData.visibility === 'private'}
//             onChange={handleChange}
//           />
//           Private
//         </label>
//         <label>
//           <input
//             type="radio"
//             name="visibility"
//             value="public"
//             checked={formData.visibility === 'public'}
//             onChange={handleChange}
//           />
//           Public
//         </label>
//       </div>

//       <div className="form-group">
//         <span>The scopes of your interest:</span>
//         <div className="tags-container">
//           {(formData.interests || []).map((interest, index) => (
//             <span key={index} className="tag">
//               {interest}
//             </span>
//           ))}
//           <button className="add-button" onClick={handleAddInterest}>+</button>
//         </div>
//       </div>

//       <div className="form-group">
//         <span>Your links:</span>
//         <div className="links-container">
//           {(formData.links || []).map((link, index) => (
//             <div key={index} className="link-item">
//               <span>{link.siteName}</span>: <a href={link.link} target="_blank" rel="noopener noreferrer">{link.link}</a>
//             </div>
//           ))}
//           <button className="add-button" onClick={handleAddLink}>+</button>
//         </div>
//       </div>

//       <div className="form-actions">
//         <button onClick={handleSave} className="save-button">Save</button>
//         <button onClick={handleCancel} className="cancel-button">Cancel</button>
//       </div>
//     </div>
//   );
// };

// export default UserProfileForm;
import React, { useState, useEffect } from 'react';
import './UserProfileForm.css'; // –ü–æ–¥–∫–ª—é—á–∏—Ç–µ CSS-—Ñ–∞–π–ª
import { FaTrashAlt } from 'react-icons/fa'; // –ò–∫–æ–Ω–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã (–º–æ–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ npm install react-icons)

const UserProfileForm = ({ onUpdateProfile, profileData, onResetProfile }) => {
  const savedProfileData = JSON.parse(localStorage.getItem('userProfile')) || profileData;

  const [formData, setFormData] = useState(savedProfileData || { name: '', lastName: '', jobTitle: '', phone: '', address: '', visibility: 'private', avatar: '', interests: [], links: [] });
  const [originalData, setOriginalData] = useState(savedProfileData || { name: '', lastName: '', jobTitle: '', phone: '', address: '', visibility: 'private', avatar: '', interests: [], links: [] });
  const [errors, setErrors] = useState({});
  const [isSaved, setIsSaved] = useState(false); // –°–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
  const validateForm = () => {
    let newErrors = {};

    // –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    if (!formData.name || formData.name.length < 2 || formData.name.length > 50 || !/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(formData.name)) {
      newErrors.name = '–ò–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–º–∏–ª–∏–∏
    if (!formData.lastName || formData.lastName.length < 2 || formData.lastName.length > 50 || !/^[a-zA-Z–∞-—è–ê-–Ø—ë–Å\s-]+$/.test(formData.lastName)) {
      newErrors.lastName = '–§–∞–º–∏–ª–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 2 –¥–æ 50 —Å–∏–º–≤–æ–ª–æ–≤ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã.';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (!formData.phone || !/^\+[\d]{10,15}$/.test(formData.phone)) {
      newErrors.phone = '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ +<–∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã><–Ω–æ–º–µ—Ä>, –æ—Ç 10 –¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤.';
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏
    if (formData.links && formData.links.length > 0) {
      formData.links.forEach((link, index) => {
        if (!/^https?:\/\/\S+$/.test(link.link)) {
          newErrors[`link-${index}`] = '–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞–ª–∏–¥–Ω–æ–π (–Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://).';
        }
      });
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–≤–∞—Ç–∞—Ä–∞
  const handleAvatarUpload = (e) => {
    const file = e.target.files[0];
    if (file) {
      const validTypes = ['image/jpeg', 'image/png', 'image/jpg'];
      if (!validTypes.includes(file.type)) {
        alert('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ .jpg, .jpeg, .png.');
        return;
      }
      if (file.size > 5 * 1024 * 1024) {
        alert('–†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 5 MB.');
        return;
      }
      const reader = new FileReader();
      reader.onloadend = () => {
        setFormData({ ...formData, avatar: reader.result });
      };
      reader.readAsDataURL(file);
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
  const handleAddInterest = () => {
    const newInterest = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–µ—Å');
    if (newInterest && newInterest.length <= 30 && /^[a-zA-Z–∞-—è–ê-–Ø—ë–Å0-9\s,.]+$/.test(newInterest)) {
      setFormData((prevState) => ({
        ...prevState,
        interests: [...(prevState.interests || []), newInterest],
      }));
    }
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
  const handleAddLink = () => {
    const siteName = prompt('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞');
    const link = prompt('–í–≤–µ–¥–∏—Ç–µ URL');
    if (siteName && link && /^https?:\/\/\S+$/.test(link)) {
      setFormData((prevState) => ({
        ...prevState,
        links: [...(prevState.links || []), { siteName, link }],
      }));
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleSave = () => {
    if (validateForm()) {
      localStorage.setItem('userProfile', JSON.stringify(formData));
      onUpdateProfile(formData);
      setOriginalData(formData); // –û–±–Ω–æ–≤–ª—è–µ–º originalData –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
      setIsSaved(true); // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const handleDeleteProfile = () => {
    localStorage.removeItem('userProfile');
    onResetProfile(); // –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    setFormData({ name: '', lastName: '', jobTitle: '', phone: '', address: '', visibility: 'private', avatar: '', interests: [], links: [] });
    setIsSaved(false); // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
  };

  // –û—Ç–º–µ–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π
  const handleCancel = () => {
    setFormData(originalData);  // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é
  };

  return (
    <div className="user-profile-form">
      <div className="avatar-upload">
        <label htmlFor="avatarInput" className="avatar-label">
          <div className="avatar-placeholder">
            {formData.avatar ? (
              <img src={formData.avatar} alt="Avatar" className="avatar-preview" />
            ) : (
              <span className="avatar-icon">üì∑</span>
            )}
          </div>
        </label>
        <input
          type="file"
          id="avatarInput"
          accept="image/*"
          onChange={handleAvatarUpload}
          style={{ display: 'none' }}
        />
      </div>

      <div className="form-group">
        <input
          type="text"
          name="name"
          placeholder="Name"
          value={formData.name}
          onChange={handleChange}
        />
        {errors.name && <span className="error">{errors.name}</span>}
      </div>

      <div className="form-group">
        <input
          type="text"
          name="lastName"
          placeholder="Lastname"
          value={formData.lastName}
          onChange={handleChange}
        />
        {errors.lastName && <span className="error">{errors.lastName}</span>}
      </div>

      <div className="form-group">
        <input
          type="text"
          name="jobTitle"
          placeholder="Job Title"
          value={formData.jobTitle || ''}
          onChange={handleChange}
        />
      </div>

      <div className="form-group">
        <input
          type="text"
          name="phone"
          placeholder="Phone"
          value={formData.phone || ''}
          onChange={handleChange}
        />
        {errors.phone && <span className="error">{errors.phone}</span>}
      </div>

      <div className="form-group">
        <input
          type="text"
          name="address"
          placeholder="Address"
          value={formData.address || ''}
          onChange={handleChange}
        />
      </div>

      <div className="form-group visibility-group">
        <span>Show your profile in Launchpad?</span>
        <label>
          <input
            type="radio"
            name="visibility"
            value="private"
            checked={formData.visibility === 'private'}
            onChange={handleChange}
          />
          Private
        </label>
        <label>
          <input
            type="radio"
            name="visibility"
            value="public"
            checked={formData.visibility === 'public'}
            onChange={handleChange}
          />
          Public
        </label>
      </div>

      <div className="form-group">
        <span>The scopes of your interest:</span>
        <div className="tags-container">
          {(formData.interests || []).map((interest, index) => (
            <span key={index} className="tag">
              {interest}
            </span>
          ))}
          <button className="add-button" onClick={handleAddInterest}>+</button>
        </div>
      </div>

      <div className="form-group">
        <span>Your links:</span>
        <div className="links-container">
          {(formData.links || []).map((link, index) => (
            <div key={index}>
              <a href={link.link} target="_blank" rel="noopener noreferrer">{link.siteName}</a>
            </div>
          ))}
          <button className="add-button" onClick={handleAddLink}>+</button>
        </div>
      </div>

      <div className="actions">
        <button onClick={handleSave}>Save</button>
        <button onClick={handleCancel}>Cancel</button>
        {isSaved && (
          <div className="actions-after-save">
            <FaTrashAlt onClick={handleDeleteProfile} className="delete-icon" />
            <button onClick={() => window.location.reload()}>Return</button>
          </div>
        )}
      </div>
    </div>
  );
};

export default UserProfileForm;
