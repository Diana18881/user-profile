
// import React, { useState, useEffect } from 'react';
// import UserProfileForm from './components/UserProfileForm';
// import ProfileDisplay from './components/ProfileDisplay';
// import './App.css';

// const App = () => {
//   // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ–µ–∫—Ç–æ–≤, –∑–∞–¥–∞—á –∏ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//   const [profileData, setProfileData] = useState(null);
//   const [projects, setProjects] = useState([]);
//   const [tasks, setTasks] = useState([]);
//   const [isEditing, setIsEditing] = useState(false); // –†–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

//   // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
//   useEffect(() => {
//     const savedData = JSON.parse(localStorage.getItem('userProfile'));
//     if (savedData) {
//       setProfileData(savedData);
//     }

//     const savedProjects = JSON.parse(localStorage.getItem('projects')) || [];
//     const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
//     setProjects(savedProjects);
//     setTasks(savedTasks);
//   }, []);

//   // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á –≤ localStorage –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
//   useEffect(() => {
//     localStorage.setItem('projects', JSON.stringify(projects));
//   }, [projects]);

//   useEffect(() => {
//     localStorage.setItem('tasks', JSON.stringify(tasks));
//   }, [tasks]);

//   // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
//   const handleAddProject = () => {
//     const projectName = prompt('Enter project name:');
//     if (projectName) {
//       setProjects([...projects, projectName]);
//     }
//   };

//   const handleAddTask = () => {
//     const taskName = prompt('Enter task name:');
//     if (taskName) {
//       setTasks([...tasks, taskName]);
//     }
//   };

//   // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
//   const handleUpdateProfile = (newData) => {
//     setProfileData(newData);
//     localStorage.setItem('userProfile', JSON.stringify(newData)); // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ localStorage
//     setIsEditing(false); // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
//   };

//   // –°–±—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è
//   const handleResetProfile = () => {
//     setProfileData(null);
//     localStorage.removeItem('userProfile'); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –∏–∑ localStorage
//   };

//   return (
//     <div className="app-container">
//       {/* –í–µ—Ä—Ö–Ω–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
//       <header className="header">
//         <h1 className="header-logo">TROOD.</h1>
//         <span className="header-title">Profile</span>
//       </header>

//       {/* –û—Å–Ω–æ–≤–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
//       <div className="content">
//         {/* –°–µ–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á */}
//         <div className="sidebar">
//           <h2>Projects:</h2>
//           <div className="card-list">
//             {projects.map((project, index) => (
//               <div className="card" key={index}>
//                 {project}
//               </div>
//             ))}
//             <div className="create-item" onClick={handleAddProject}>
//               Create project +
//             </div>
//           </div>

//           <h2>Tasks:</h2>
//           <div className="card-list">
//             {tasks.map((task, index) => (
//               <div className="card" key={index}>
//                 {task}
//               </div>
//             ))}
//             <div className="create-item" onClick={handleAddTask}>
//               Create task +
//             </div>
//           </div>
//         </div>

//         {/* –ü—Ä–æ—Ñ–∏–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è */}
//         <div className="profile-section">
//           {isEditing ? (
//             // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ñ–æ—Ä–º—É
//             <UserProfileForm 
//               onUpdateProfile={handleUpdateProfile} 
//               profileData={profileData} 
//             />
//           ) : (
//             // –ï—Å–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è
//             <>
//               {profileData ? (
//                 <ProfileDisplay profileData={profileData} />
//               ) : (
//                 <p>No profile data available. Click "Edit" to add data.</p>
//               )}
//               <button onClick={() => setIsEditing(true)}>Edit Profile</button>
//               {profileData && (
//                 <button onClick={handleResetProfile} className="reset-button">
//                   Reset Profile
//                 </button>
//               )}
//             </>
//           )}
//         </div>
//       </div>
//     </div>
//   );
// };

// export default App;

import React, { useState, useEffect } from 'react';
import UserProfileForm from './components/UserProfileForm';
import ProfileDisplay from './components/ProfileDisplay';
import './App.css';

const App = () => {
  const [profileData, setProfileData] = useState(null);
  const [projects, setProjects] = useState([]);
  const [tasks, setTasks] = useState([]);
  const [isEditing, setIsEditing] = useState(false);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    const savedData = JSON.parse(localStorage.getItem('userProfile'));
    if (savedData) {
      setProfileData(savedData);
    }

    const savedProjects = JSON.parse(localStorage.getItem('projects')) || [];
    const savedTasks = JSON.parse(localStorage.getItem('tasks')) || [];
    setProjects(savedProjects);
    setTasks(savedTasks);
  }, []);

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–µ–∫—Ç—ã –∏ –∑–∞–¥–∞—á–∏ –≤ localStorage
  useEffect(() => {
    localStorage.setItem('projects', JSON.stringify(projects));
  }, [projects]);

  useEffect(() => {
    localStorage.setItem('tasks', JSON.stringify(tasks));
  }, [tasks]);

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
  const handleAddProject = () => {
    const projectName = prompt('Enter project name:');
    if (projectName) {
      setProjects([...projects, projectName]);
    }
  };

  const handleAddTask = () => {
    const taskName = prompt('Enter task name:');
    if (taskName) {
      setTasks([...tasks, taskName]);
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
  const handleDeleteProject = (index) => {
    setProjects((prev) => prev.filter((_, i) => i !== index));
  };

  const handleDeleteTask = (index) => {
    setTasks((prev) => prev.filter((_, i) => i !== index));
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
  const handleUpdateProfile = (newData) => {
    setProfileData(newData);
    localStorage.setItem('userProfile', JSON.stringify(newData));
    setIsEditing(false);
  };

  // –°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è
  const handleResetProfile = () => {
    setProfileData(null);
    localStorage.removeItem('userProfile');
  };

  return (
    <div className="app-container">
      <header className="header">
        <h1 className="header-logo">TROOD.</h1>
        <span className="header-title">Profile</span>
      </header>

      <div className="content">
        <div className="sidebar">
          <h2>Projects:</h2>
          <div className="card-list">
            {projects.map((project, index) => (
              <div className="card" key={index}>
                {project}
                <button
                  onClick={() => handleDeleteProject(index)}
                  className="delete-button"
                  title="Delete project"
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
            <div className="create-item" onClick={handleAddProject}>
              Create project +
            </div>
          </div>

          <h2>Tasks:</h2>
          <div className="card-list">
            {tasks.map((task, index) => (
              <div className="card" key={index}>
                {task}
                <button
                  onClick={() => handleDeleteTask(index)}
                  className="delete-button"
                  title="Delete task"
                >
                  üóëÔ∏è
                </button>
              </div>
            ))}
            <div className="create-item" onClick={handleAddTask}>
              Create task +
            </div>
          </div>
        </div>

        <div className="profile-section">
          {isEditing ? (
            <UserProfileForm onUpdateProfile={handleUpdateProfile} profileData={profileData} />
          ) : (
            <>
              {profileData ? (
                <ProfileDisplay profileData={profileData} />
              ) : (
                <p>No profile data available. Click "Edit" to add data.</p>
              )}
              <button onClick={() => setIsEditing(true)}>Edit Profile</button>
              {profileData && (
                <button onClick={handleResetProfile} className="reset-button">
                  Reset Profile
                </button>
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
};

export default App;

